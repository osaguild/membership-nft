/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Checker, CheckerInterface } from "../../contracts/Checker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "manager_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "AnswerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "QuestionAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "checkAnswers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCountOfQuestions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getQuestion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "isAnswered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "bool[]",
        name: "answers",
        type: "bool[]",
      },
    ],
    name: "registAnswers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
    ],
    name: "setQuestion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200152f3803806200152f8339818101604052810190620000379190620000e9565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b611404806200012b6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806322775ffd14610067578063271b57fc146100975780633d9b4c6a146100b5578063817dda18146100e5578063b34e75ec14610101578063db88176f1461011d575b600080fd5b610081600480360381019061007c9190610aa0565b61014d565b60405161008e9190610ae8565b60405180910390f35b61009f610356565b6040516100ac9190610b1c565b60405180910390f35b6100cf60048036038101906100ca9190610aa0565b61036c565b6040516100dc9190610ae8565b60405180910390f35b6100ff60048036038101906100fa9190610dab565b6103ce565b005b61011b60048036038101906101169190610ed8565b61068c565b005b61013760048036038101906101329190610f34565b610769565b6040516101449190610fe9565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d69061107d565b60405180910390fd5b60005b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905081101561034b57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181815481106102835761028261109d565b5b90600052602060002090602091828204019190069054906101000a900460ff16151560016000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106102fd576102fc61109d565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900460ff16151514610338576000915050610351565b8080610343906110fb565b9150506101e2565b50600190505b919050565b6000806103636000610874565b90508091505090565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905014156103c457600090506103c9565b600190505b919050565b818160008251141580156103e3575080518251145b610422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041990611190565b60405180910390fd5b60005b82518110156104be57600160008483815181106104455761044461109d565b5b6020026020010151815260200190815260200160002060010160019054906101000a900460ff166104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a2906111fc565b60405180910390fd5b80806104b6906110fb565b915050610425565b506000600190505b6104d06000610874565b81116105a0576001600082815260200190815260200160002060010160019054906101000a900460ff161561058d576000805b845181101561054a5784818151811061051f5761051e61109d565b5b6020026020010151831415610537576001915061054a565b8080610542906110fb565b915050610503565b508061058b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058290611268565b60405180910390fd5b505b8080610598906110fb565b9150506104c6565b5083600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190805190602001906105f7929190610898565b5082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061064e9291906108e5565b507fee1e5e7e605fe5afe9b286c052e7bc8009ddf2e235af438b5ad67ba6fa0dd19d3360405161067e9190611297565b60405180910390a150505050565b6106966000610882565b60006106a26000610874565b9050826001600083815260200190815260200160002060000190805190602001906106ce92919061098b565b50816001600083815260200190815260200160002060010160006101000a81548160ff021916908315150217905550600180600083815260200190815260200160002060010160016101000a81548160ff0219169083151502179055507f678f1a87ca8ec1c0f6a317c30bf30f47ffa31a3889054d281fb6fe519fe2e895338260405161075c9291906112b2565b60405180910390a1505050565b60606001600083815260200190815260200160002060010160019054906101000a900460ff166107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c59061134d565b60405180910390fd5b6001600083815260200190815260200160002060000180546107ef9061139c565b80601f016020809104026020016040519081016040528092919081815260200182805461081b9061139c565b80156108685780601f1061083d57610100808354040283529160200191610868565b820191906000526020600020905b81548152906001019060200180831161084b57829003601f168201915b50505050509050919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b8280548282559060005260206000209081019282156108d4579160200282015b828111156108d35782518255916020019190600101906108b8565b5b5090506108e19190610a11565b5090565b82805482825590600052602060002090601f0160209004810192821561097a5791602002820160005b8382111561094b57835183826101000a81548160ff021916908315150217905550926020019260010160208160000104928301926001030261090e565b80156109785782816101000a81549060ff021916905560010160208160000104928301926001030261094b565b505b5090506109879190610a11565b5090565b8280546109979061139c565b90600052602060002090601f0160209004810192826109b95760008555610a00565b82601f106109d257805160ff1916838001178555610a00565b82800160010185558215610a00579182015b828111156109ff5782518255916020019190600101906109e4565b5b509050610a0d9190610a11565b5090565b5b80821115610a2a576000816000905550600101610a12565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6d82610a42565b9050919050565b610a7d81610a62565b8114610a8857600080fd5b50565b600081359050610a9a81610a74565b92915050565b600060208284031215610ab657610ab5610a38565b5b6000610ac484828501610a8b565b91505092915050565b60008115159050919050565b610ae281610acd565b82525050565b6000602082019050610afd6000830184610ad9565b92915050565b6000819050919050565b610b1681610b03565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b8582610b3c565b810181811067ffffffffffffffff82111715610ba457610ba3610b4d565b5b80604052505050565b6000610bb7610a2e565b9050610bc38282610b7c565b919050565b600067ffffffffffffffff821115610be357610be2610b4d565b5b602082029050602081019050919050565b600080fd5b610c0281610b03565b8114610c0d57600080fd5b50565b600081359050610c1f81610bf9565b92915050565b6000610c38610c3384610bc8565b610bad565b90508083825260208201905060208402830185811115610c5b57610c5a610bf4565b5b835b81811015610c845780610c708882610c10565b845260208401935050602081019050610c5d565b5050509392505050565b600082601f830112610ca357610ca2610b37565b5b8135610cb3848260208601610c25565b91505092915050565b600067ffffffffffffffff821115610cd757610cd6610b4d565b5b602082029050602081019050919050565b610cf181610acd565b8114610cfc57600080fd5b50565b600081359050610d0e81610ce8565b92915050565b6000610d27610d2284610cbc565b610bad565b90508083825260208201905060208402830185811115610d4a57610d49610bf4565b5b835b81811015610d735780610d5f8882610cff565b845260208401935050602081019050610d4c565b5050509392505050565b600082601f830112610d9257610d91610b37565b5b8135610da2848260208601610d14565b91505092915050565b60008060408385031215610dc257610dc1610a38565b5b600083013567ffffffffffffffff811115610de057610ddf610a3d565b5b610dec85828601610c8e565b925050602083013567ffffffffffffffff811115610e0d57610e0c610a3d565b5b610e1985828601610d7d565b9150509250929050565b600080fd5b600067ffffffffffffffff821115610e4357610e42610b4d565b5b610e4c82610b3c565b9050602081019050919050565b82818337600083830152505050565b6000610e7b610e7684610e28565b610bad565b905082815260208101848484011115610e9757610e96610e23565b5b610ea2848285610e59565b509392505050565b600082601f830112610ebf57610ebe610b37565b5b8135610ecf848260208601610e68565b91505092915050565b60008060408385031215610eef57610eee610a38565b5b600083013567ffffffffffffffff811115610f0d57610f0c610a3d565b5b610f1985828601610eaa565b9250506020610f2a85828601610cff565b9150509250929050565b600060208284031215610f4a57610f49610a38565b5b6000610f5884828501610c10565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f9b578082015181840152602081019050610f80565b83811115610faa576000848401525b50505050565b6000610fbb82610f61565b610fc58185610f6c565b9350610fd5818560208601610f7d565b610fde81610b3c565b840191505092915050565b600060208201905081810360008301526110038184610fb0565b905092915050565b7f4f6e6c79206d616e616765722063616e2063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b6000611067602383610f6c565b91506110728261100b565b604082019050919050565b600060208201905081810360008301526110968161105a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061110682610b03565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611139576111386110cc565b5b600182019050919050565b7f466f726d617420636865636b206572726f720000000000000000000000000000600082015250565b600061117a601283610f6c565b915061118582611144565b602082019050919050565b600060208201905081810360008301526111a98161116d565b9050919050565b7f416e7377657220636865636b206572726f720000000000000000000000000000600082015250565b60006111e6601283610f6c565b91506111f1826111b0565b602082019050919050565b60006020820190508181036000830152611215816111d9565b9050919050565b7f41637469766520616e7377657220636865636b206572726f7200000000000000600082015250565b6000611252601983610f6c565b915061125d8261121c565b602082019050919050565b6000602082019050818103600083015261128181611245565b9050919050565b61129181610a62565b82525050565b60006020820190506112ac6000830184611288565b92915050565b60006040820190506112c76000830185611288565b6112d46020830184610b0d565b9392505050565b7f5175657374696f6e206973206e6f7420616374697665206f72206f7574206f6660008201527f2072616e67650000000000000000000000000000000000000000000000000000602082015250565b6000611337602683610f6c565b9150611342826112db565b604082019050919050565b600060208201905081810360008301526113668161132a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113b457607f821691505b602082108114156113c8576113c761136d565b5b5091905056fea26469706673582212207540feb6ccae4e3af70df7c4faf216d3226367bc34186a8bfdac2568d44797c364736f6c63430008090033";

type CheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Checker__factory extends ContractFactory {
  constructor(...args: CheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Checker> {
    return super.deploy(manager_, overrides || {}) as Promise<Checker>;
  }
  override getDeployTransaction(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(manager_, overrides || {});
  }
  override attach(address: string): Checker {
    return super.attach(address) as Checker;
  }
  override connect(signer: Signer): Checker__factory {
    return super.connect(signer) as Checker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckerInterface {
    return new utils.Interface(_abi) as CheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Checker {
    return new Contract(address, _abi, signerOrProvider) as Checker;
  }
}
